['java', 'eclipse', 'maven', 'application', 'signing'].each {
    apply plugin : it
}

set("myGradleVersion", GradleVersion.current().getVersion().substring(0,3))

println ("Using Gradle version: " + myGradleVersion)

if (Double.parseDouble(myGradleVersion) >= 1.6) {
   apply plugin : 'maven-publish'
}
else {
     println "Note: you need Gradle version >= 1.6 to publish to a Maven repo"
}

//Main class for 'gradle run'
mainClassName = 'org.metacsp.examples.multi.TestTimelinePlotting'

//JDK version
sourceCompatibility = 1.6
targetCompatibility = 1.6

def getSvnRevision() {
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            executable = 'svn'
            args = ['info']
            standardOutput = os
        }
        def outputAsString = os.toString()
        def matchLastChangedRev = outputAsString =~ /Last Changed Rev: (\d+)/
 
        ext.svnRev = "${matchLastChangedRev[0][1]}".toInteger()
    }
    return svnRev
}

//MetaCSP version
version = '1.0.' + getSvnRevision()
//version = '0.0.0-SNAPSHOT'
group = 'org.metacsp'

//Repos for dependencies
repositories {
  mavenCentral()
}

dependencies {
  //It's all in Maven Central
  compile 'org.ow2.sat4j:org.ow2.sat4j.sat:2.3.4'
  compile 'net.sf.jung:jung2:2.0.1'
  compile 'net.sf.jung:jung-graph-impl:2.0.1'
  compile 'net.sf.jung:jung-algorithms:2.0.1'
  compile 'net.sf.jung:jung-visualization:2.0.1'
  compile 'org.prefuse:prefuse:beta-20071021'
  compile 'jfree:jfreechart:1.0.13'
  compile 'junit:junit:4.8.1'
  compile 'com.googlecode.aima-java:aima-core:0.10.5'
}

javadoc {
    //destinationDir = file(projectDir.toString() + "/../javadoc")
    options.header = "Meta-CSP Framework API"
    options.author = 'true'
    title = "<table><tr><td align=left><a href=\"http://metacsp.org\" target=_blank><img src=img/meta-csp-logo-small.png></a></td><td>&nbsp;&nbsp;&nbsp;</td><td align=left>The Meta-CSP Framework<br><small><i>A Java API for Meta-CSP based reasoning</i></small></td></tr></table>"
    copy {
         from(projectDir) { 
	 	include 'img/*.png'
	}
	into javadoc.destinationDir
    } 
}

//create javaDoc jar
task javadocJar (type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    from(projectDir) {
       include 'license.txt'
    }
}

//create sources jar
task sourceJar (type : Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    from(projectDir) {
       include 'license.txt'
    }
}

//create extra lib jar (Orbital)
//task libJar (type : Jar) {
//    def lib = file("lib")
//    classifier = 'libs'
//    from lib
//}

//publish bin, source and javaDoc to repo
if (Double.parseDouble(GradleVersion.current().getVersion().substring(0,3)) >= 1.6) {
publishing {
    publications {
        metaCSPFramework(MavenPublication) {
            from components.java

	    //================
	    //== Modify POM ==
	    //================
	    pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'The MetaCSP Framework'
                    description 'A Java API for Meta-CSP based reasoning'
                    url 'http://metacsp.org'
		    parent {
		    	groupId 'org.sonatype.oss'
			artifactId 'oss-parent'
    			version '7'
		    }
                    scm {
                        url 'http://metacsp.org'
                        connection 'scm:svn:http://meta-csp-framework.googlecode.com/svn/trunk'
                        developerConnection 'scm:svn:https://meta-csp-framework.googlecode.com/svn/trunk'
                    }
                    licenses {
                        license {
                            name 'The MIT License'
                            url 'http://opensource.org/licenses/mit-license.php'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'federico.pecora'
                            name 'Federico Pecora'
                            email 'federico.pecora@gmail.com'
                        }
                    }
                }
            }
	    //====================
	    //== end Modify POM ==
	    //====================

 	    artifact (javadocJar) {
                classifier = 'javadoc'
            }
	    artifact (sourceJar) {
                classifier = 'sources'
            }
	    //artifact (libJar) {
            //    classifier = 'libs'
            //}
        }
    }
    repositories {
        maven {
            url "file:/${project.projectDir}/artifacts"
        }
    }
}
}

defaultTasks 'install'
